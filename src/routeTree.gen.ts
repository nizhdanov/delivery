/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WrapperImport } from './routes/_wrapper'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout.index'
import { Route as WrapperOrderImport } from './routes/_wrapper.order'

// Create Virtual Routes

const WrapperSigninLazyImport = createFileRoute('/_wrapper/signin')()
const LayoutProfileLazyImport = createFileRoute('/_layout/profile')()
const LayoutHistoryLazyImport = createFileRoute('/_layout/history')()

// Create/Update Routes

const WrapperRoute = WrapperImport.update({
  id: '/_wrapper',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const WrapperSigninLazyRoute = WrapperSigninLazyImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => WrapperRoute,
} as any).lazy(() =>
  import('./routes/_wrapper.signin.lazy').then((d) => d.Route),
)

const LayoutProfileLazyRoute = LayoutProfileLazyImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => LayoutRoute,
} as any).lazy(() =>
  import('./routes/_layout.profile.lazy').then((d) => d.Route),
)

const LayoutHistoryLazyRoute = LayoutHistoryLazyImport.update({
  id: '/history',
  path: '/history',
  getParentRoute: () => LayoutRoute,
} as any).lazy(() =>
  import('./routes/_layout.history.lazy').then((d) => d.Route),
)

const WrapperOrderRoute = WrapperOrderImport.update({
  id: '/order',
  path: '/order',
  getParentRoute: () => WrapperRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_wrapper': {
      id: '/_wrapper'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof WrapperImport
      parentRoute: typeof rootRoute
    }
    '/_wrapper/order': {
      id: '/_wrapper/order'
      path: '/order'
      fullPath: '/order'
      preLoaderRoute: typeof WrapperOrderImport
      parentRoute: typeof WrapperImport
    }
    '/_layout/history': {
      id: '/_layout/history'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof LayoutHistoryLazyImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/profile': {
      id: '/_layout/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof LayoutProfileLazyImport
      parentRoute: typeof LayoutImport
    }
    '/_wrapper/signin': {
      id: '/_wrapper/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof WrapperSigninLazyImport
      parentRoute: typeof WrapperImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutHistoryLazyRoute: typeof LayoutHistoryLazyRoute
  LayoutProfileLazyRoute: typeof LayoutProfileLazyRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutHistoryLazyRoute: LayoutHistoryLazyRoute,
  LayoutProfileLazyRoute: LayoutProfileLazyRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface WrapperRouteChildren {
  WrapperOrderRoute: typeof WrapperOrderRoute
  WrapperSigninLazyRoute: typeof WrapperSigninLazyRoute
}

const WrapperRouteChildren: WrapperRouteChildren = {
  WrapperOrderRoute: WrapperOrderRoute,
  WrapperSigninLazyRoute: WrapperSigninLazyRoute,
}

const WrapperRouteWithChildren =
  WrapperRoute._addFileChildren(WrapperRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof WrapperRouteWithChildren
  '/order': typeof WrapperOrderRoute
  '/history': typeof LayoutHistoryLazyRoute
  '/profile': typeof LayoutProfileLazyRoute
  '/signin': typeof WrapperSigninLazyRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesByTo {
  '': typeof WrapperRouteWithChildren
  '/order': typeof WrapperOrderRoute
  '/history': typeof LayoutHistoryLazyRoute
  '/profile': typeof LayoutProfileLazyRoute
  '/signin': typeof WrapperSigninLazyRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_wrapper': typeof WrapperRouteWithChildren
  '/_wrapper/order': typeof WrapperOrderRoute
  '/_layout/history': typeof LayoutHistoryLazyRoute
  '/_layout/profile': typeof LayoutProfileLazyRoute
  '/_wrapper/signin': typeof WrapperSigninLazyRoute
  '/_layout/': typeof LayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/order' | '/history' | '/profile' | '/signin' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/order' | '/history' | '/profile' | '/signin' | '/'
  id:
    | '__root__'
    | '/_layout'
    | '/_wrapper'
    | '/_wrapper/order'
    | '/_layout/history'
    | '/_layout/profile'
    | '/_wrapper/signin'
    | '/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  WrapperRoute: typeof WrapperRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  WrapperRoute: WrapperRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/_wrapper"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/history",
        "/_layout/profile",
        "/_layout/"
      ]
    },
    "/_wrapper": {
      "filePath": "_wrapper.tsx",
      "children": [
        "/_wrapper/order",
        "/_wrapper/signin"
      ]
    },
    "/_wrapper/order": {
      "filePath": "_wrapper.order.tsx",
      "parent": "/_wrapper"
    },
    "/_layout/history": {
      "filePath": "_layout.history.lazy.tsx",
      "parent": "/_layout"
    },
    "/_layout/profile": {
      "filePath": "_layout.profile.lazy.tsx",
      "parent": "/_layout"
    },
    "/_wrapper/signin": {
      "filePath": "_wrapper.signin.lazy.tsx",
      "parent": "/_wrapper"
    },
    "/_layout/": {
      "filePath": "_layout.index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
